#1、 日志级别level： 5种级别：debug、info、warn、error、fatal

#2、日志输出地：appender

#3、log4j.rootLogger：是对根类的设置，如不说明，以下的子类都要继承这些设置
#   语法为：log4j.rootLogger = level, appenderName1, appenderName2, ......
#   或：log4j.rootCategory = level, appenderName1, appenderName2, ......

#4、log4j.category.*：是对自定义类的设置，可以对类、包和工程单独设置，默认情况下，子类要继承父类的全部设置
#   非root logger的语法为：log4j.logger.loggerName1 = level, appenderName1, appenderName2, ......
#   或：log4j.category.loggerName1 = level, appenderName1, appenderName2, ......

#缺省的logger，记录所有的包的信息输出，日志级别：info，日志输出地：stdout,LogFile,ErrorFile
log4j.rootLogger=error,stdout,LogFile,ErrorFile

#输出包com.jroo下的info级别的日志到输出地SystemFile
#com.explorelims包及其子包下的Logger不光在Appender SystemFile里输出，也会在rootLogger的Appender stuout和logfile中输出
log4j.logger.com.honourchina=info
#log4j.additivity是 子Logger 是否继承 父Logger 的 输出源（appender） 的标志位,只在SystemFile中输出
#log4j.additivity.com.explorelims = false
#功能名称打印日志，在java中，这样使用：private static Log log = LogFactory.getLog("accessRecordLog");log.info("打印点什么呢？");
#log4j.logger.accessRecordLog=info,AccessLogFile
#只打印到AccessLogFile文件中
#log4j.additivity.accessRecordLog=false

#各种框架日志控制
log4j.logger.org.apache.struts2=error,SystemFile
log4j.logger.org.apache.cxf=error,SystemFile
log4j.logger.com.opensymphony.xwork2=error,SystemFile
log4j.logger.org.springframework=error,SystemFile
log4j.additivity.org.springframework = false
log4j.logger.org.hibernate.ps.PreparedStatementCache=error, SystemFile
log4j.logger.org.hibernate=error, SystemFile
log4j.logger.net.sf.ehcache=error,SystemFile


#JDBC config
#log4j.logger.java.sql.Connection = DEBUG,AccessLogFile
#log4j.logger.java.sql.Statement = DEBUG,AccessLogFile
#log4j.logger.java.sql.PreparedStatement = DEBUG,AccessLogFile
#log4j.logger.java.sql.ResultSet = DEBUG,AccessLogFile

#输出日志到控制台
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Threshold=INFO
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=Log4j:[%d{yyyy-MM-dd HH:mm:ss}] %5p %c{1}:%L - %m%n

#输出所有日志到文件LogFile.log
log4j.appender.LogFile=org.apache.log4j.DailyRollingFileAppender
log4j.appender.LogFile.Threshold= info
#默认值是true,意谓着所有的消息都会被立即输出。
log4j.appender.LogFile.ImmediateFlush = true 
#log4j.appender.LogFile.file=${catalina.base}/logs/explorelims/LogFile.log
log4j.appender.LogFile.file=${webapp.root}/logs/LogFile.log
log4j.appender.LogFile.DatePattern='.'yyyy-MM-dd
log4j.appender.LogFile.layout=org.apache.log4j.PatternLayout
log4j.appender.LogFile.layout.ConversionPattern=Log4j:[%d{yyyy-MM-dd HH:mm:ss}] %5p %c{1}:%L - %m%n

#输出所有错误日志到错误日志文件
log4j.appender.ErrorFile=org.apache.log4j.DailyRollingFileAppender
log4j.appender.ErrorFile.Threshold=ERROR
log4j.appender.ErrorFile.File=${webapp.root}/logs/ErrorFile.log
log4j.appender.ErrorFile.DatePattern='.'yyyy-MM-dd
log4j.appender.ErrorFile.layout=org.apache.log4j.PatternLayout
log4j.appender.ErrorFile.layout.ConversionPattern=Log4j:[%d{yyyy-MM-dd HH:mm:ss}] %5p %c{1}:(%F:%L) - %m%n

#根据输出地SystemFile输出日志到文件
log4j.appender.SystemFile=org.apache.log4j.DailyRollingFileAppender
log4j.appender.SystemFile.Threshold=ERROR
log4j.appender.SystemFile.file=${webapp.root}/logs/SystemFile.log
log4j.appender.SystemFile.DatePattern='.'yyyy-MM-dd
log4j.appender.SystemFile.layout=org.apache.log4j.PatternLayout
log4j.appender.SystemFile.layout.ConversionPattern=Log4j:[%d{yyyy-MM-dd HH:mm:ss}] %5p %c{1}:%L - %m%n

#按功能名称打印日志
log4j.appender.AccessLogFile=org.apache.log4j.DailyRollingFileAppender
log4j.appender.AccessLogFile.Threshold=ERROR
log4j.appender.AccessLogFile.file=${webapp.root}/logs/AccessLogFile.log
log4j.appender.AccessLogFile.DatePattern='.'yyyy-MM-dd
log4j.appender.AccessLogFile.layout=org.apache.log4j.PatternLayout
log4j.appender.AccessLogFile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} - %m%n
